#ifndef SOUNDMANAGER_H
#define SOUNDMANAGER_H

#include <map>
#include <OgreVector3.h>
#include <OgreString.h>
#include <fmod.hpp>
#include <fmod_event.hpp>
#include <fmod_errors.h>

namespace HovUni {
	class SoundManager {
		private:
			/** The only instance of the SoundManager available */
			static SoundManager * msSingleton;

			/** 
			 * A HashMap which contains all the created musicprompts.
			 * Ready to be activated/deactivated.
			 */
			std::map<unsigned int, FMOD::MusicPrompt*> mPrompts;

			FMOD::EventSystem * mEventSystem;
			FMOD::MusicSystem * mMusicSystem;

			FMOD_RESULT mResult;

			static const Ogre::String msPrefix;
			
			/**
			 * Base constructor for the SoundManager.
			 *
			 * @param mediaPath The path to where all the sound media files are located. 
			 *		DO NOT FORGET TRAILING \\
			 * @param mediaFile A ".fev" filename that contains the project data
			 */
			SoundManager(const Ogre::String& mediaPath, const Ogre::String& mediaFile);

		public:
			/**
			 * Get a reference to the SoundManager
			 * @return reference to the SoundManager
			 * @throws UninitialisedException This means you have not initialised this singleton
			 *		using the init function.
			 */
			static SoundManager& getSingleton(void);

			/**
			 * Get a pointer to the SoundManager
			 * @return pointer to the SoundManager
			 * @throws UninitialisedException This means you have not initialised this singleton
			 *		using the init function.
			 */
			static SoundManager* getSingletonPtr(void);

			/**
			 * Initialisation function, should be the first one to call so that
			 * the instance get initialised. If you dont do this, you will get
			 * an UninitializedException when trying to request the singelton.
			 *
			 * @param mediaPath The path to where all the sound media files are located.
			 *		This can be absolute or relative
			 * @param mediaFile A ".fev" filename that contains the project data
			 */
			static void init(const Ogre::String& mediaPath, const Ogre::String& mediaFile);
			
			/**
			 * Virtual desctructor for the SoundManager.
			 */
			virtual ~SoundManager();

			/**
			 * Function to check and log FMOD errors
			 *
			 * @param result The error that occured.
			 */
			void ERRCHECK(FMOD_RESULT result);
			
			/**
			 * Start playing a sound in the 3D space at a given location
			 * with a given velocity
			 *
			 * @param soundId The ID of the sound you want to start
			 * @param position The position where you want to sound to be originating from
			 * @param velocity The velocity of the sound source (default is a static source)
			 * @return A new channel ID to reference the newly created sound channel
			 */
			int start3DSound(int soundId, const Ogre::Vector3& position, const Ogre::Vector3& velocity);
		
			/**
			 * Stop a certain sound source from playing
			 *
			 * @param channelId The source you want to stop playing (this is an ID obtained
			 *		by calling {@link #<start3DSound> start3DSound} to start the sound first)
			 */
			void stop3DSound(int channelId);
		
			/**
			 * Start a new ambient sound. This will be added to the top of the stack (this is the background music)
			 *
			 * @param ambientId The ID generated by FMOD Designer.
			 */
			void startAmbient(unsigned int ambientId);
		
			/**
			 * Stop a certain ambient sound. This will be popped from the stack (this is the background music)
			 *
			 * @param ambientId The ID generated by FMOD Designer.
			 */
			void stopAmbient(unsigned int ambientId);
		
			/**
			 * Update the position of the listener, this should be called everytime a new frame 
			 * has been calculated.
			 *
			 * @param position The new position of the listener.
			 *		Can be 0 to not update the position
			 * @param velocity The velocity of the listener <strong>in distance units per second (m/s)</strong>.
			 *		Default is 0 --> dont update the velocity
			 * @param forward The forwards orientation of the listener, must be of unit length and perpendicular to the up vector.
			 *		Default is 0 --> dont update the forwards orientation
			 * @param up The upwards orientation of the listener, must be of unit length and perpendicular to the forward vector.
			 *		Default is 0 --> dont update hte upwards orientation
			 */
			void updateListenerPosition(const Ogre::Vector3& position, const Ogre::Vector3& velocity, const Ogre::Vector3& forward, const Ogre::Vector3& up);

			/**
			 * Call this update function every frame
			 */
			void update();
	};
}

#endif //SOUNDMANAGER_H
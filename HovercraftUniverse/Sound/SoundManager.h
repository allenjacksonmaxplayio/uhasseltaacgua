#ifndef SOUNDMANAGER_H
#define SOUNDMANAGER_H

#include <map>
#include <OgreVector3.h>
#include <OgreString.h>
#include <fmod.hpp>
#include <fmod_event.hpp>
#include <fmod_errors.h>
#include <vector>
#include "Moveable3DEmitter.h"

namespace HovUni {
	class SoundManager {
		friend class Moveable3DEmitter;

		private:
			/** The only instance of the SoundManager available */
			static SoundManager * msSingleton;

			/** Constant prefix for output */
			static const Ogre::String msPrefix;

			/** 
			 * A Map which contains all the created musicprompts.
			 * Ready to be activated/deactivated.
			 */
			std::map<unsigned int, FMOD::MusicPrompt*> mPrompts;

			/** A list of registered emitters to be updated */
			std::vector<Moveable3DEmitter*> mEmitters;

			/** The FMOD event system */
			FMOD::EventSystem * mEventSystem;

			/** The FMOD system */
			FMOD::System * mSystem;

			/** The FMOD music system */
			FMOD::MusicSystem * mMusicSystem;

			/** Default result variable used for testing */
			FMOD_RESULT mResult;

			/**
			 * Base constructor for the SoundManager.
			 *
			 * @param mediaPath The path to where all the sound media files are located. 
			 *		DO NOT FORGET TRAILING \\
			 * @param mediaFile A ".fev" filename that contains the project data
			 */
			SoundManager(const Ogre::String& mediaPath, const Ogre::String& mediaFile);

			/**
			 * Retrieve a sound event.
			 *
			 * @param eventGUID The unique identifier for this type of events.
			 * @param evt A pointer to where the event should be stored.
			 * @return Will return the result to be handled at the caller.
			 */
			FMOD_RESULT getSoundEvent(const char* eventGUID, FMOD::Event ** evt);

		public:
			/**
			 * Get a reference to the SoundManager
			 * @return reference to the SoundManager
			 * @throws UninitialisedException This means you have not initialised this singleton
			 *		using the init function.
			 */
			static SoundManager& getSingleton(void);

			/**
			 * Get a pointer to the SoundManager
			 * @return pointer to the SoundManager
			 * @throws UninitialisedException This means you have not initialised this singleton
			 *		using the init function.
			 */
			static SoundManager* getSingletonPtr(void);

			/**
			 * Initialisation function, should be the first one to call so that
			 * the instance get initialised. If you dont do this, you will get
			 * an UninitializedException when trying to request the singelton.
			 *
			 * @param mediaPath The path to where all the sound media files are located.
			 *		This can be absolute or relative
			 * @param mediaFile A ".fev" filename that contains the project data
			 */
			static void init(const Ogre::String& mediaPath, const Ogre::String& mediaFile);
			
			/**
			 * Virtual desctructor for the SoundManager.
			 */
			virtual ~SoundManager();

			/**
			 * Function to check and log FMOD errors
			 *
			 * @param result The error that occured.
			 */
			void ERRCHECK(FMOD_RESULT result);
			
			/**
			 * Start playing a sound in the 3D space at a given location
			 * with a given velocity
			 *
			 * @param soundId The ID of the sound you want to start
			 * @param position The position where you want to sound to be originating from
			 * @param velocity The velocity of the sound source (default is a static source)
			 * @return A new channel ID to reference the newly created sound channel
			 */
			int start3DSound(int soundId, const Ogre::Vector3& position, const Ogre::Vector3& velocity);
		
			/**
			 * Stop a certain sound source from playing
			 *
			 * @param channelId The source you want to stop playing (this is an ID obtained
			 *		by calling {@link #<start3DSound> start3DSound} to start the sound first)
			 */
			void stop3DSound(int channelId);
		
			/**
			 * Start a new ambient sound. This will be added to the top of the stack (this is the background music)
			 *
			 * @param ambientId The ID generated by FMOD Designer.
			 */
			void startAmbient(unsigned int ambientId);
		
			/**
			 * Stop a certain ambient sound. This will be popped from the stack (this is the background music)
			 *
			 * @param ambientId The ID generated by FMOD Designer.
			 */
			void stopAmbient(unsigned int ambientId);
		
			/**
			 * Update the position of the listener, this should be called everytime a new frame 
			 * has been calculated.
			 *
			 * @param position The new position of the listener.
			 *		Can be 0 to not update the position
			 * @param velocity The velocity of the listener <strong>in distance units per second (m/s)</strong>.
			 *		Default is 0 --> dont update the velocity
			 * @param forward The forwards orientation of the listener, must be of unit length and perpendicular to the up vector.
			 *		Default is 0 --> dont update the forwards orientation
			 * @param up The upwards orientation of the listener, must be of unit length and perpendicular to the forward vector.
			 *		Default is 0 --> dont update hte upwards orientation
			 */
			void updateListenerPosition(Ogre::Vector3* position, Ogre::Vector3* velocity = 0, Ogre::Vector3* forward = 0, Ogre::Vector3* up = 0);

			/**
			 * Set a certain parameter inside a certain event to a specified value.
			 *
			 * @param eventGUID The unique ID for the event
			 * @param parameterID The id of the parameter you want to modify
			 * @param value The value you want to set the perameter to
			 */
			void setEventParameter(const char* eventGUID, unsigned int parameterID, float value);

			/**
			 * Get the range of a certain parameter inside a certain event.
			 *
			 * @param eventGUID The unique ID for the event
			 * @param parameterID The id of the parameter you want to modify
			 * @param min Will be set to the minimum value of the parameter 
			 * @param max Will be set to the maximum value of the parameter
			 */
			void getEventParameterRange(const char* eventGUID, unsigned int parameterID, float* min, float* max);

			/**
			 * Register a new emitter to the sound manager
			 *
			 * @param emitter The emitter to register
			 */
			void registerEmitter(Moveable3DEmitter* emitter);

			/**
			 * Deregister an emitter from the sound manager
			 *
			 * @param emitter The emitter to deregister
			 */
			void deregisterEmitter(Moveable3DEmitter* emitter);

			/**
			 * Call this update function every frame
			 */
			void update();
	};
}

#endif //SOUNDMANAGER_H
#summary Iedereen moet deze regels volgen!!!
= Code Conventions =
   
  # Alle klassen moeten gedeclareerd worden in een header file met dezelfde naam. Dit bestand moet eindigen op .h en moet geplaatst worden in de include folder van het project in kwestie.
  # De implementatie van een klasse moet geplaatst worden in de source file met dezelfde naam als de header file en moet eindigen op .cpp.
  # Alles wordt gedeclareerd in een namespace. Aangezien ons project niet zo enorm groot is, gaan we geen namespaces nesten en nemen we dus gewoon als globale namespace 'HovUni'.
  # Vermijd zoveel mogelijk includes in de header files, verkies altijd de source files.
  # Bij het serializeren of deserializeren van data maak je bij voorkeur een subklasse van Serializer en gebruik je diens methodes.
  # Gebruik altijd STL boven custom containers of algoritmen.
  # Gebruik altijd C++ technieken boven C technieken (iostream vs cstdio, ...).
  # Gebruik zo vaak mogelijk het const patroon in methoden waar nodig.
  # Prefereer protected boven private.
  # Declareer destructors altijd als 'virtual'.
  # Vermijd non-const by-reference parameters.
  # Klassen, types en structuren gebruiken altijd title case ({{{MyClass}}}).
  # Methoden en lokale variabelen gebruiken camel case ({{{myMethod}}}).
  # Member variables worden voorafgegaan door 'm' ({{{mVariable}}}), statische member variables worden geprefixed door 'ms' ({{{msStaticVar}}}).
  # Preprocessor macros zijn altijd met enkel hoofdletters.
  # Enums zijn title case en hun waarden zijn enkel hoofdletters.
  # Klassen en methodes worden altijd volledig gedocumenteerd in het engels in de header file, gebruik makende van Doxygen-compatibele commentaar. 
  # Gebruik nooit new delete direct, gebruik smart pointers in plaats hiervan.
  # Zet altijd een sluitbrace '}' op een nieuwe lijn en een '{' op dezelfde lijn als het voorafgaande statement (bv. {{{if (imCool) {}}}). Uitzondering op de regel is bij lege blocks, dan doe je {{{if (imCool) {} }}}.
  # Documenteer altijd waarom je een block leeglaat als dit zo is.
  # Gebruik nooit volgende vorm: '{{{if (imCool) print "Hello"}}}', voeg altijd omringende braces toe, zelfs al is er maar 1 statement in de block.
  # Gebruik typedefs indien een template-based type te ingewikkeld wordt.
  # Voeg altijd spaces toe tussen operatoren en operands ('x + y').
  # Haken worden altijd als volgt gebruikt: {{{if (imCool) {} }}} en niet bijvoorbeeld {{{if( imCool ){} }}}
  # Gebruik exception handling om fouten op te vangen, geen returnwaarden.
  # Maak gebruik van assert().

= Code Practices =

  # Constructie en vernietiging van objecten:
    * Stel de contructie van objecten uit tot je ze echt nodig hebt. Een slecht voorbeeld: 
{{{
Object obj;
if (arg == 0) {
  return;
}
...
}}}
    * Gebruik de initializer lijst: {{{Vehicle(const string& name) : mName(name) { } }}}
    * Prefereer pre-increment ({{{++i}}}) boven post-increment ({{{i++}}})
  # Vermijd virtuele functie oprooepen in performantie-kritieke stukken.
  